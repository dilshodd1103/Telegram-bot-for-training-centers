from telethon import events
import re
from keyboards.default.menu import menu, menu_ru
from keyboards.inline.aloqa import aloqa, aloqa_ru
from keyboards.inline.aloqaga_chiq import aloqa_keyboard, aloqa_keyboard_ru
from keyboards.inline.kurslar import user_and_course, user_and_course_ru
from loader import client, db

client.state = None

from pathlib import Path


async def get_course_image_path(course_id):
    media_root = Path("/home/dilshod/Projects/telegram_project/app/foreach_django/media")
    file_name = f"{course_id}"
    file_path = media_root / file_name
    if not file_path.exists():
        raise FileNotFoundError(f"Rasm {file_path} topilmadi!")
    return str(file_path)


@client.on(events.NewMessage(pattern="üìöBizning kurslarimiz"))
async def kurss(event):
    client.state = "VIEW_COURSES"
    course = await db.select_all_kurs()
    if course:
        await event.respond(
            f"<b><b>üìöKurslarimiz soni : </b><i>{len(course)} ta</i>", parse_mode="html"
        )
        await event.respond(
            "<b><b>üìöBizning kurslarimiz : </b>",
            buttons=user_and_course(course),
            parse_mode="html",
        )
        client.kurslar_state = True
    else:
        await event.respond("<b>Kurslar mavjud emas</b>", parse_mode="html")


@client.on(events.CallbackQuery(pattern="back3"))
async def menuu(event):
    client.state = "BACK_TO_MENU"
    await event.respond("<i>Menu : </i>", buttons=menu, parse_mode="html")
    user_id = event.sender_id
    await db.save_user_action(user_id)
    client.kurslar_state = False


@client.on(events.CallbackQuery())
async def tarif(event):
    if event.data.isdigit() and getattr(client, "kurslar_state", False):
        client.state = "VIEW_COURSE_DETAILS"
        data = int(event.data)
        data_img = await db.get_image(data)
        kurs = await db.select_kurs(data)
        user = await db.select_user(event.sender_id)
        kurs_nomi, tarif, rasm = kurs[2], kurs[5], kurs[7]

        if rasm:
            saved_image_path = await get_course_image_path(course_id=data_img)
            await client.send_file(
                event.sender_id,
                saved_image_path,
                caption=f"<b>üìïKurs nomi: {kurs_nomi}</b>\n\n{tarif}",
                parse_mode="html",
            )
        else:
            await event.respond(
                f"<b>üìïKurs nomi: {kurs_nomi}</b>\n\n{tarif}", parse_mode="html"
            )
        answer = (
            f"<i>üìïKurs haqida qo'shimcha ma'lumot olishni istasangiz, operatorimiz siz bilan bog'lanishi mumkin.\n"
            f"Buning uchun quyidagi tugmani bosing :\n\n"
            f"*Sizning raqamingiz : <u>{user[3]}</u>, boshqa raqamga qo'ng'iroq qilishimizni xohlasangiz "
            f" \n<i>üõ†Sozlamalar</i> bo'limidan raqamingizni o'zgartiring.</i>"
        )
        await event.respond(
            answer, buttons=aloqa(f"aloqa:{kurs_nomi}"), parse_mode="html"
        )
        await event.respond("<i>Menu : </i>", buttons=menu, parse_mode="html")

        user_id = event.sender_id
        await db.save_user_action(user_id)
        client.kurslar_state = False


@client.on(events.CallbackQuery(pattern="aloqa:+"))
async def aloqa1(event):
    client.state = "REQUEST_CONTACT"
    kurs = event.data.decode("utf-8").split(":")[1]
    user = await db.select_user(event.sender_id)
    username = event.sender.username or "Username mavjud emas"
    if username != "Username mavjud emas":
        username = f"@{username}"

    answer = (
        f"<b>Foydalanuvchi <u>{user[1]}</u>  <u>{kurs}</u> kursi uchun aloqaga chiqishni so'radi\n\n"
        f"Telefon raqam : <i>{user[3]}</i>\nUsername : <i>{username}</i></b>"
    )

    await event.respond(
        f"<b><i>{kurs}</i> kursi bo'yicha so'rovingiz yuborildi‚úÖ\n\n"
        f"<i>Operatorlarimiz tez orada <u>{user[3]}</u> raqamingizga aloqaga chiqishadi.</i></b>",
        parse_mode="html",
    )

    client.state = "NOTIFY_ADMINS"
    admins = await db.get_admin()
    if admins:
        for admin in admins:
            admin_id = admin["telegram_id"]
            await client.send_message(
                admin_id,
                answer,
                buttons=aloqa_keyboard(event.sender_id),
                parse_mode="html",
            )


client.state = None


@client.on(events.NewMessage(pattern="üìö–ù–∞—à–∏ –∫—É—Ä—Å—ã"))
async def kurss(event):
    client.state = "VIEW_COURSES_"
    course = await db.select_all_kurs()
    if course:
        await event.respond(
            f"<b><b>üìö–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É—Ä—Å–æ–≤: </b><i>{len(course)} —à—Ç</i>", parse_mode="html"
        )
        await event.respond(
            "<b><b>üìö–ù–∞—à–∏ –∫—É—Ä—Å—ã: </b>",
            buttons=user_and_course_ru(course),
            parse_mode="html",
        )
        client.kurslar_state = True
    else:
        await event.respond("<b>–ö—É—Ä—Å—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</b>", parse_mode="html")


@client.on(events.CallbackQuery(pattern="back4"))
async def menuu(event):
    client.state = "BACK_TO_MENU_"
    await event.respond("<i>–ú–µ–Ω—é: </i>", buttons=menu_ru, parse_mode="html")
    user_id = event.sender_id
    await db.save_user_action(user_id)
    client.kurslar_state = False

@client.on(events.CallbackQuery(pattern=r"see_(\d+)"))
async def tarif(event):
    callback_data = event.data.decode('utf-8')
    match = re.match(r"see_(\d+)", callback_data)
    if match and getattr(client, "kurslar_state", False):
        client.state = "VIEW_COURSE_DETAILS_"
        data = int(match.group(1))

        data_img = await db.get_image(data)
        kurs = await db.select_kurs(data)
        user = await db.select_user(event.sender_id)
        kurs_nomi, tarif, rasm = kurs[3], kurs[6], kurs[7]

        if rasm:
            saved_image_path = await get_course_image_path(course_id=data_img)
            await client.send_file(
                event.sender_id,
                saved_image_path,
                caption=f"<b>üìï–ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞: {kurs_nomi}</b>\n\n{tarif}",
                parse_mode="html")
        else:
            await event.respond(
                f"<b>üìï–ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞: {kurs_nomi}</b>\n\n{tarif}", parse_mode="html")
        answer = (
            f"<i>üìï–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–µ, –Ω–∞—à –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.\n"
            f"–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∫–Ω–æ–ø–∫—É:\n\n"
            f"*–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <u>{user[3]}</u>. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –º—ã –ø–æ–∑–≤–æ–Ω–∏–ª–∏ –Ω–∞ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä, "
            f"–∏–∑–º–µ–Ω–∏—Ç–µ –µ–≥–æ –≤ —Ä–∞–∑–¥–µ–ª–µ <i>üõ†–ù–∞—Å—Ç—Ä–æ–π–∫–∏</i>.</i>")
        await event.respond(
            answer, buttons=aloqa_ru(f"aloqa_ru:{kurs_nomi}"), parse_mode="html")
        await event.respond("<i>–ú–µ–Ω—é: </i>", buttons=menu_ru, parse_mode="html")
        user_id = event.sender_id
        await db.save_user_action(user_id)
        client.kurslar_state = False
    else:
        await event.respond("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.", parse_mode="html")


@client.on(events.CallbackQuery(pattern="aloqa_ru:+"))
async def aloqa1(event):
    client.state = "REQUEST_CONTACT_"
    kurs = event.data.decode("utf-8").split(":")[1]
    user = await db.select_user(event.sender_id)
    username = event.sender.username or "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    if username != "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç":
        username = f"@{username}"

    answer = (
        f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <u>{user[1]}</u> –∑–∞–ø—Ä–æ—Å–∏–ª —Å–≤—è–∑—å –ø–æ –∫—É—Ä—Å—É <u>{kurs}</u>\n\n"
        f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <i>{user[3]}</i>\n–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <i>{username}</i></b>"
    )

    await event.respond(
        f"<b><i>–í–∞—à –∑–∞–ø—Ä–æ—Å –ø–æ –∫—É—Ä—Å—É <i>{kurs}</i> –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω‚úÖ\n\n"
        f"<i>–ù–∞—à–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂—É—Ç—Å—è —Å –≤–∞–º–∏ –ø–æ –Ω–æ–º–µ—Ä—É <u>{user[3]}</u>.</i></b>",
        parse_mode="html",
    )

    client.state = "NOTIFY_ADMINS_"
    admins = await db.get_admin()
    if admins:
        for admin in admins:
            admin_id = admin["telegram_id"]
            await client.send_message(
                admin_id,
                answer,
                buttons=aloqa_keyboard_ru(event.sender_id),
                parse_mode="html",
            )
